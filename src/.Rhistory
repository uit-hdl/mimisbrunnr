# For men and women
for(i in 1:2){
currentSex = "Man"
if(i == 2) currentSex = "Woman"
# We are also going to see the result for no high school stratification
{
# Get the table of people within the same sex and highschool
currentSubtable        = completeTable[ completeTable[,sexIndex] == currentSex, ]
peopleWithFriendsDF    = currentSubtable[currentSubtable[ , overallConnectionsIndex] > 0,]
totalPeopleWithFriends = nrow(peopleWithFriendsDF)
# For each biomarker
for(k in 1:TOTAL_BIOMARKERS){
# Prepare the blank DF where we put the dataset
# Some of these can be NA since not everyone friend has the biomarkers
# analysis done (or could even be under LOD)
regressionAllDF = DF(totalPeopleWithFriends,2, defaultValue = NA)
colnames(regressionAllDF) = c("MyFriendsAverage", "MyLevel")
currentBiomarkerName = biomarkersMetadataDF$Protein[k]
# For each person, find their friends averages
for(x in 1:totalPeopleWithFriends){
# Get the person relevant information
currentPersonID       = peopleWithFriendsDF[x, IDIndex     ]
currentPersonBioLevel = completeTable[currentPersonID, NDLIndex + k - 1]
# If your biomarker is not NA, do everything
# otherwise skip to the next person
if(!is.na(currentPersonBioLevel)){
# Find the friends surrounding you (you nominate or nominate you)
currentPersonFriends  = unique(c(getFrienshipTypes(currentPersonID, myOverallFriendshipMatrix)[[4]],
getFrienshipTypes(currentPersonID, myOverallFriendshipMatrix)[[5]]))
currentTotalFriends   = length(currentPersonFriends)
currentPersonFriendsAverageBioLevel = 0
currentPersonFriendsNonNAFriends    = 0
# Find the friends average by accumulating into the variable
# but check that you is a valid friend.
#     Same sex
#     Same highschool
#     No NA values
for(y in 1:currentTotalFriends){
# Get the biomarker level
currentFriendID       = currentPersonFriends[y]
currentFriendBioLevel = completeTable[currentFriendID, NDLIndex + k - 1]
currentFriendSex      = as.character(completeTable[currentFriendID,sexIndex])
currentFriendHS       = as.character(completeTable[currentFriendID,highSchoolIndex])
# If the biomarker is non-NA, added to the average
if(!is.na(currentFriendBioLevel)  &
currentFriendSex == currentSex &
currentFriendHS  == currentHighschool){
currentPersonFriendsAverageBioLevel = currentPersonFriendsAverageBioLevel + currentFriendBioLevel
currentPersonFriendsNonNAFriends    = currentPersonFriendsNonNAFriends    + 1
}
}
# If we have friends with non NA values, add everything to the
# proper DF, otherwise skip and leave a NA line, that is fine
if(currentPersonFriendsNonNAFriends>0){
currentPersonFriendsAverageBioLevel = currentPersonFriendsAverageBioLevel / currentPersonFriendsNonNAFriends
regressionAllDF[x,1] = currentPersonFriendsAverageBioLevel
regressionAllDF[x,2] = currentPersonBioLevel
}
}
}
# Clean the data from NA data
regressionAllDF = regressionAllDF[   !is.na(regressionAllDF[,1]),  ]
# Run the model
# Plot the graph
currentPlotTitle     = paste0(currentBiomarkerName," for ",currentSex, " in all HS")
currentTableOverride = paste0(currentBiomarkerName,"_",currentSex,"_allHS")
myBioModel = doSimpleRegression(regressionAllDF, 1, 2, BIOMARKERS_FOLDER_IMAGES_REGRESSION_BIOFRIENDS,
plotTitle = currentPlotTitle,
overrideTableName = currentTableOverride)
mySummary = summary(myBioModel)
resultsMenWomenDF[myCounter,1] = currentBiomarkerName
resultsMenWomenDF[myCounter,2] = currentSex
resultsMenWomenDF[myCounter,3] = currentHighschool
resultsMenWomenDF[myCounter,4] = mySummary$r.squared
resultsMenWomenDF[myCounter,5] = mySummary$coefficients[2,4]
mySexCounter = mySexCounter + 1
}
}
# For high school stratification
for(j in 1:totalHighschools){
currentHighschool = myHighschools[j]
# Get the table of people within the same sex and highschool
currentSubtable = completeTable[ completeTable[,sexIndex]        == currentSex &
completeTable[,highSchoolIndex] == currentHighschool, ]
peopleWithFriendsDF    = currentSubtable[currentSubtable[ , overallConnectionsIndex] > 0,]
totalPeopleWithFriends = nrow(peopleWithFriendsDF)
# For each biomarker
for(k in 1:TOTAL_BIOMARKERS){
# Prepare the blank DF where we put the dataset
# Some of these can be NA since not everyone friend has the biomarkers
# analysis done (or could even be under LOD)
regressionAllDF = DF(totalPeopleWithFriends,2, defaultValue = NA)
colnames(regressionAllDF) = c("MyFriendsAverage", "MyLevel")
currentBiomarkerName = biomarkersMetadataDF$Protein[k]
# For each person, find their friends averages
for(x in 1:totalPeopleWithFriends){
# Get the person relevant information
currentPersonID       = peopleWithFriendsDF[x, IDIndex     ]
currentPersonBioLevel = completeTable[currentPersonID, NDLIndex + k - 1]
# If your biomarker is not NA, do everything
# otherwise skip to the next person
if(!is.na(currentPersonBioLevel)){
# Find the friends surrounding you (you nominate or nominate you)
currentPersonFriends  = unique(c(getFrienshipTypes(currentPersonID, myOverallFriendshipMatrix)[[4]],
getFrienshipTypes(currentPersonID, myOverallFriendshipMatrix)[[5]]))
currentTotalFriends   = length(currentPersonFriends)
currentPersonFriendsAverageBioLevel = 0
currentPersonFriendsNonNAFriends    = 0
# Find the friends average by accumulating into the variable
# but check that you is a valid friend.
#     Same sex
#     Same highschool
#     No NA values
for(y in 1:currentTotalFriends){
# Get the biomarker level
currentFriendID       = currentPersonFriends[y]
currentFriendBioLevel = completeTable[currentFriendID, NDLIndex + k - 1]
currentFriendSex      = as.character(completeTable[currentFriendID,sexIndex])
currentFriendHS       = as.character(completeTable[currentFriendID,highSchoolIndex])
# If the biomarker is non-NA, added to the average
if(!is.na(currentFriendBioLevel)  &
currentFriendSex == currentSex &
currentFriendHS  == currentHighschool){
currentPersonFriendsAverageBioLevel = currentPersonFriendsAverageBioLevel + currentFriendBioLevel
currentPersonFriendsNonNAFriends    = currentPersonFriendsNonNAFriends    + 1
}
}
# If we have friends with non NA values, add everything to the
# proper DF, otherwise skip and leave a NA line, that is fine
if(currentPersonFriendsNonNAFriends>0){
currentPersonFriendsAverageBioLevel = currentPersonFriendsAverageBioLevel / currentPersonFriendsNonNAFriends
regressionAllDF[x,1] = currentPersonFriendsAverageBioLevel
regressionAllDF[x,2] = currentPersonBioLevel
}
}
}
# Clean the data from NA data
regressionAllDF = regressionAllDF[   !is.na(regressionAllDF[,1]),  ]
# Run the model
# Plot the graph
currentPlotTitle     = paste0(currentBiomarkerName," for ",currentSex, " in ", currentHighschool)
currentTableOverride = paste0(currentBiomarkerName,"_",currentSex,"_",currentHighschool)
myBioModel = doSimpleRegression(regressionAllDF, 1, 2, BIOMARKERS_FOLDER_IMAGES_REGRESSION_BIOFRIENDS,
plotTitle = currentPlotTitle,
overrideTableName = currentTableOverride)
mySummary = summary(myBioModel)
resultsComplexDF[myCounter,1] = currentBiomarkerName
resultsComplexDF[myCounter,2] = currentSex
resultsComplexDF[myCounter,3] = currentHighschool
resultsComplexDF[myCounter,4] = mySummary$r.squared
#resultsComplexDF[myCounter,5] = as.numeric(mySummary$fstatistic[1])
resultsComplexDF[myCounter,5] = mySummary$coefficients[2,4]
myCounter = myCounter + 1
}
}
}
}
# Write to disk
# (but round numbers first)
resultsComplexRoundedDF    = resultsComplexDF
resultsComplexRoundedDF$R2 = round(resultsComplexRoundedDF$R2, 2)
for( i in 1:nrow(resultsComplexRoundedDF)){
resultsComplexRoundedDF$Pvalue[i] = getAsterkisPValue(resultsComplexDF$Pvalue[i])
}
# -- These are the raw results
write.csv2(resultsComplexRoundedDF, SCATTER_STRATOS_ROUNDED_FILEPATH)
write.csv2(resultsComplexDF,        SCATTER_STRATOS_FILEPATH)
# We have waaaay too many significances, let delete those that are ns
# and include that in the paper, the rest of the raw result can be found
# at the github page
# -- Delete those that are ns
resultsMyVSFriendBioPaper = resultsComplexRoundedDF
resultsMyVSFriendBioPaper = resultsMyVSFriendBioPaper[resultsMyVSFriendBioPaper$Pvalue != "ns",]
# -- Sort by Sex, Highschool, and Protein in that order
resultsMyVSFriendBioPaper = resultsMyVSFriendBioPaper[order(resultsMyVSFriendBioPaper$Sex,resultsMyVSFriendBioPaper$Highschool, resultsMyVSFriendBioPaper$Protein),]
# -- The table is too big, divide into two tables, for men and women
resultsMyVSFriendBioPaperMen    = resultsMyVSFriendBioPaper[resultsMyVSFriendBioPaper$Sex == "Man",]
resultsMyVSFriendBioPaperWomen  = resultsMyVSFriendBioPaper[resultsMyVSFriendBioPaper$Sex == "Woman",]
writeTableLATEX(resultsMyVSFriendBioPaperMen, BIOMARKERS_FOLDER_TABLES_NETWORK, tableCaption = "Protein for men, which are similar to your male friend, stratify by highschool",
overrideTableName = "biofriendsMalesHighschool", widthProportion = 0.7, heightProportion = 0.4)
writeTableLATEX(resultsMyVSFriendBioPaperWomen, BIOMARKERS_FOLDER_TABLES_NETWORK, tableCaption = "Protein for women, which are similar to your male friend, stratify by highschool",
overrideTableName = "biofriendsFemalesHighschool", widthProportion = 0.7, heightProportion = 0.4)
}
source("~/Desktop/Amalgamlab/mimisbrunnr/src/biomarkers/2of4.R", echo=TRUE)
source("~/Desktop/Amalgamlab/mimisbrunnr/src/biomarkers/2of4.R", echo=TRUE)
source("~/Desktop/Amalgamlab/mimisbrunnr/src/biomarkers/4of4.R", echo=TRUE)
source("~/Desktop/Amalgamlab/mimisbrunnr/src/biomarkers/4of4.R", echo=TRUE)
source("~/Desktop/Amalgamlab/mimisbrunnr/src/biomarkers/4of4.R", echo=TRUE)
medicinesDBDF
source("~/Desktop/Amalgamlab/mimisbrunnr/src/dataCleaningV2.R", echo=TRUE)
# Plot the boxplots for missing data and show the data on screen
{
myYMaximum = max( max(remainingToDeletedFriendsLostDF$Total) , max(deletedByRemainingFriendsLostDF$Total) )
doBoxPlot(remainingToDeletedFriendsLostDF, 2, LOGS_FOLDER,
colorsVector = COLOR_RED_MED,
plotTitle    = "Nominations lost; from people remaining, to dissapeared people.",
plotSubtitle = "",
plotXLabel   = "Missing Friends", plotYLabel = "Total",
plotTheme    = "simple",
ymin = 0, ymax = myYMaximum,
overrideCaption = "Boxplot for number of missing edges from existing keys to deleted keys.")
doBoxPlot(deletedByRemainingFriendsLostDF, 2, LOGS_FOLDER,
colorsVector = COLOR_BLUE_MED,
plotTitle    = "Popularity of people that have dissapear.",
plotSubtitle = "",
plotXLabel   = "Missing Friends", plotYLabel = "Total",
plotTheme    = "simple",
ymin = 0, ymax = myYMaximum,
overrideCaption = "Boxplot for number of missing edges by existing keys to deleted keys.")
print("List of people who nominated somone that doesn't exist in the dataset")
print(remainingToDeletedFriendsLostDF)
print("List of people who doesn't exist and which existing person nominate them")
print(deletedByRemainingFriendsLostDF)
}
source("~/Desktop/Amalgamlab/mimisbrunnr/src/constants.R", echo=TRUE)
source("~/Desktop/Amalgamlab/mimisbrunnr/src/lib/tools/toolsPlotting.R", echo=TRUE)
# Plot the boxplots for missing data and show the data on screen
{
myYMaximum = max( max(remainingToDeletedFriendsLostDF$Total) , max(deletedByRemainingFriendsLostDF$Total) )
doBoxPlot(remainingToDeletedFriendsLostDF, 2, LOGS_FOLDER,
colorsVector = COLOR_RED_MED,
plotTitle    = "Nominations lost; from people remaining, to dissapeared people.",
plotSubtitle = "",
plotXLabel   = "Missing Friends", plotYLabel = "Total",
plotTheme    = "simple",
ymin = 0, ymax = myYMaximum,
overrideCaption = "Boxplot for number of missing edges from existing keys to deleted keys.")
doBoxPlot(deletedByRemainingFriendsLostDF, 2, LOGS_FOLDER,
colorsVector = COLOR_BLUE_MED,
plotTitle    = "Popularity of people that have dissapear.",
plotSubtitle = "",
plotXLabel   = "Missing Friends", plotYLabel = "Total",
plotTheme    = "simple",
ymin = 0, ymax = myYMaximum,
overrideCaption = "Boxplot for number of missing edges by existing keys to deleted keys.")
print("List of people who nominated somone that doesn't exist in the dataset")
print(remainingToDeletedFriendsLostDF)
print("List of people who doesn't exist and which existing person nominate them")
print(deletedByRemainingFriendsLostDF)
}
source("~/Desktop/Amalgamlab/mimisbrunnr/src/constants.R", echo=TRUE)
read.csv2(FILTER_DATA_MEDICINE_FILEPATH,        fileEncoding = "UTF-8", stringsAsFactors = FALSE)
head(medicinesDBDF)
medicinesDBDF        = read.csv2(FILTER_DATA_MEDICINE_FILEPATH,        fileEncoding = "UTF-8", stringsAsFactors = FALSE)
head(medicinesDBDF)
medicinesDBDF
source("~/Desktop/Amalgamlab/mimisbrunnr/src/dataCleaningV2.R", echo=TRUE)
write.csv2( medicinesDBDF,         file = READY_DATA_MEDICINES_FILEPATH,       row.names = FALSE)
source("~/Desktop/Amalgamlab/mimisbrunnr/src/constants.R", echo=TRUE)
READY_DATA_DISEASES_FILEPATH        = file.path(paste(DATA_READY_FOLDER, READY_DATA_DISEASES_FILENAME,        sep = ""))
READY_DATA_MEDICINES_FILEPATH       = file.path(paste(DATA_READY_FOLDER, READY_DATA_MEDICINES_FILENAME,       sep = ""))
source("~/Desktop/Amalgamlab/mimisbrunnr/src/constants.R", echo=TRUE)
write.csv2( medicinesDBDF,         file = READY_DATA_MEDICINES_FILENAME,       row.names = FALSE)
head(medicinesDBDF)
if(TRUE){
# Variables
# MEDICATION_DAILY_FF1	MEDICATION_BRAND1_FF1	MEDICF	MEDICATION_ATC1_FF1
# MEDICATION_REGULAR1_FF1	MEDICATION_BRAND2_FF1	MEDICE	MEDICATION_ATC2_FF1
# MEDICATION_REGULAR2_FF1	MEDICATION_BRAND3_FF1	MEDICD	MEDICATION_ATC3_FF1
# MEDICATION_REGULAR3_FF1	MEDICATION_BRAND4_FF1	MEDICC	MEDICATION_ATC4_FF1
# MEDICATION_REGULAR4_FF1	MEDICATION_BRAND5_FF1	MEDICB	MEDICATION_ATC5_FF1
# MEDICATION_REGULAR5_FF1	MEDICATION_OTHER_FF1	MEDICATION_OTHER_DESC_FF1
# MEDIC0	MEDIC1	MEDIC2	MEDIC3	MEDIC4	MEDIC5	MEDIC6	MEDIC7	MEDIC8	MEDIC9	MEDICA
# ANALGETICS_FF1	ANALGETICS_BRAND1_FF1	ANALG3	ANALGETICS_ATC1_FF1	ANALGETICS_HOURS1_FF1
# ANALGETICS_LAST_NUMBER1_FF1	ANALGETICS_BRAND2_FF1	ANALG2	ANALGETICS_ATC2_FF1	ANALGETICS_HOURS2_FF1
# ANALGETICS_LAST_NUMBER2_FF1	ANALGETICS_BRAND3_FF1	ANALG1	ANALGETICS_ATC3_FF1	ANALGETICS_HOURS3_FF1
# ANALGETICS_LAST_NUMBER3_FF1	ANALGETICS_BRAND4_FF1	ANALG0	ANALGETICS_ATC4_FF1	ANALGETICS_HOURS4_FF1
# ANALGETICS_LAST_NUMBER4_FF1	ANTIBIOTICS_FF1	ANTIBIOTICS_BRAND1_FF1	ANTIB5	ANTIBIOTICS_ATC1_FF1
# ANTIBIOTICS_BRAND2_FF1	ANTIB4	ANTIBIOTICS_ATC2_FF1	ANTIBIOTICS_BRAND3_FF1	ANTIB3	ANTIBIOTICS_ATC3_FF1
# MEDICATION_DATE_FF1	MEDICATION_TIME_FF1	MEDICATION_SIGNATURE_FF1	PAINKILLERS_PRESC_4WEEKS_FF1
# PAINKILLERS_NOPRESC_4WEEKS_FF1	SLEEPING_PILLS_4WEEKS_FF1	ANTIDEPRESSANTS_4WEEKS_FF1	ADHD_MEDICATION_4WEEKS_FF1
# TRANQUILIZERS_4WEEKS_FF1
# If a person report taking in the last 4 week:
#
# -- Painkillers
# -- Sleeping pills
# -- Antidepressant
# -- ADHD
# -- Tranquilizers
#
# Check that the medication is register, otherwise add it and label it as unknown
# Count how many people take medicines
# Create a new temporal table
tempTable    = originalHormonalTable
# Add the IDs
tempTable$ID = basicTable$ID
# Delete the columns that we don't need
tempTable[,c(1:41)]                   = NULL
tempTable[,c(18:(ncol(tempTable))-1)] = NULL
# Take away people who don't do drugs
tempTable = tempTable[tempTable$medication_daily_ff1 == 1,]
# Take away people who do OTHERS drugs but are still registered as drug users
totalRows = nrow(tempTable)
keepRows  = rep(FALSE, totalRows)
for(i in 1:totalRows){
if(!is.na(tempTable$medication_atc1_ff1[i])) #R is a horrible language, and NA != "" is not FALSE, is NA, so you need to check for NA independently.
if( tempTable$medication_atc1_ff1[i] != "" ) keepRows[i] = TRUE
}
tempTable = tempTable[keepRows,]
totalRows = sum(keepRows)
# Now we have all the data that we need, now let melt it by medication
# -- We need to know, how many rows we need in the new dataframe. Count how
#    many values are missing in columsn 2,3,4 and 5. We garanteed now that
#    1 is not empty.
na2 = sum(tempTable$medication_atc2_ff1 != "") # R is a horrible language, you can't call your variable 2na, but you can na2
na3 = sum(tempTable$medication_atc3_ff1 != "")
na4 = sum(tempTable$medication_atc4_ff1 != "")
na5 = sum(tempTable$medication_atc5_ff1 != "")
totalCells = totalRows + na2 + na3 + na4 + na5
# -- Create the final new dataframe
drugUseDF = data.frame(matrix(NA, nrow = totalCells, ncol = 6))
colnames(drugUseDF) = c("ID", "Type", "Brand", "ATC", "Regularity", "Content")
cellID     = 1
atcIndexes = c(3,6,9,12,15)
# -- For each row of the temporal table
for(i in 1:totalRows){
# For each atc code
for(j in 1:5){
# get the atc code index
currentIndex = atcIndexes[j]
# For each ATC which is not empty
if(tempTable[i,currentIndex]!=""){
# Add the info to the final DF
# -- ID
drugUseDF[cellID,1] = tempTable$ID[i]
# -- Type
drugUseDF[cellID,2] = ""
# -- Brand
drugUseDF[cellID,3] = tempTable[i , currentIndex - 1]
# -- ATC
drugUseDF[cellID,4] = tempTable[i , currentIndex]
# -- Regularity
drugUseDF[cellID,5] = tempTable[i , currentIndex + 1]
# -- Content
drugUseDF[cellID,6] = ""
cellID = cellID + 1
}
}
}
# This conclude all the medicine table, however there are a few more
# instances to include here.
# -- Manual review of analgesics
{
# ANALGETICS_FF1	ANALGETICS_BRAND1_FF1	ANALG3	ANALGETICS_ATC1_FF1	ANALGETICS_HOURS1_FF1
# ANALGETICS_LAST_NUMBER1_FF1	ANALGETICS_BRAND2_FF1	ANALG2	ANALGETICS_ATC2_FF1	ANALGETICS_HOURS2_FF1
# ANALGETICS_LAST_NUMBER2_FF1	ANALGETICS_BRAND3_FF1	ANALG1	ANALGETICS_ATC3_FF1	ANALGETICS_HOURS3_FF1
# ANALGETICS_LAST_NUMBER3_FF1	ANALGETICS_BRAND4_FF1	ANALG0	ANALGETICS_ATC4_FF1	ANALGETICS_HOURS4_FF1
# ANALGETICS_LAST_NUMBER4_FF1
# Create a new temporal table
tempTable    = originalBiomarkersTable
# Add the IDs
tempTable$ID = basicTable$ID
# Delete the columns that we don't need
tempTable[,c(1:45)]                   = NULL
tempTable[,c(23:(ncol(tempTable))-1)] = NULL
# Clean the spaces that are in the ATC1 and ATC2 codes
tempTable$ANALGETICS_ATC1_FF1 = gsub(" ","",tempTable$ANALGETICS_ATC1_FF1)
tempTable$ANALGETICS_ATC2_FF1 = gsub(" ","",tempTable$ANALGETICS_ATC2_FF1)
# Take away people who don't take analgetics
tempTable = tempTable[!tempTable$ANALGETICS_FF1 == 0,]
tempTable = tempTable[!tempTable$ANALGETICS_FF1 == "",]
tempTable = tempTable[!is.na(tempTable$ANALGETICS_FF1),]
totalRows = nrow(tempTable)
# There is nobody taking 3 analgesics, so we check only for brand 1 and 2
na2 = sum(tempTable$ANALGETICS_ATC2_FF1 != "")
totalCells = totalRows + na2
# -- Create the final new dataframe
analgesicUseDF = data.frame(matrix(NA, nrow = totalCells, ncol = 6))
colnames(analgesicUseDF) = c("ID", "Type", "Brand", "ATC", "Regularity", "Content")
cellID     = 1
atcIndexes = c(4,9)
# -- For each row of the temporal table
for(i in 1:totalRows){
# For each atc code
for(j in 1:2){
# get the atc code index
currentIndex = atcIndexes[j]
# For each ATC which is not empty
if(tempTable[i,currentIndex]!=""){
# Add the info to the final DF
# -- ID
analgesicUseDF[cellID,1] = tempTable$ID[i]
# -- Type
analgesicUseDF[cellID,2] = ""
# -- Brand
analgesicUseDF[cellID,3] = tempTable[i , currentIndex - 2]
# -- ATC
analgesicUseDF[cellID,4] = tempTable[i , currentIndex]
# -- Regularity
analgesicUseDF[cellID,5] = ""
# -- Content
analgesicUseDF[cellID,6] = ""
cellID = cellID + 1
}
}
}
# Clean the trailing spaces from brand names and delete NA rows
analgesicUseDF$Brand = trimws(analgesicUseDF$Brand)
analgesicUseDF       = analgesicUseDF[!is.na(analgesicUseDF[,1]), ]
}
# -- Manual review of antibiotics
{
#ANTIBIOTICS_FF1	ANTIBIOTICS_BRAND1_FF1	ANTIB5	ANTIBIOTICS_ATC1_FF1
# ANTIBIOTICS_BRAND2_FF1	ANTIB4	ANTIBIOTICS_ATC2_FF1	ANTIBIOTICS_BRAND3_FF1	ANTIB3	ANTIBIOTICS_ATC3_FF1
# Create a new temporal table
tempTable    = originalBiomarkersTable
# Add the IDs
tempTable$ID = basicTable$ID
# Delete the columns that we don't need
# Nobody takes more than 1 antibiotics, so the table is simplified significantly
tempTable[,c(1:67)]                   = NULL
tempTable[,c(5:(ncol(tempTable))-1)] = NULL
# Clean the spaces that are in the ATC1 and trailling/leading spaces in brand
tempTable$ANTIBIOTICS_ATC1_FF1   = gsub(" ","",tempTable$ANTIBIOTICS_ATC1_FF1)
tempTable$ANTIBIOTICS_BRAND1_FF1 = trimws(tempTable$ANTIBIOTICS_BRAND1_FF1)
# Take away people who don't take analgetics
tempTable = tempTable[!tempTable$ANTIBIOTICS_BRAND1_FF1 == 0,]
tempTable = tempTable[!tempTable$ANTIBIOTICS_BRAND1_FF1 == "",]
tempTable = tempTable[!is.na(tempTable$ANTIBIOTICS_BRAND1_FF1),]
totalRows = nrow(tempTable)
# -- Create the final new dataframe
antibioticsUseDF = data.frame(matrix(NA, nrow = totalRows, ncol = 6))
colnames(antibioticsUseDF) = c("ID", "Type", "Brand", "ATC", "Regularity", "Content")
cellID     = 1
# -- For each row of the temporal table
for(i in 1:totalRows){
# get the atc code index
currentIndex = 3
# For each ATC which is not empty
if(tempTable[i,currentIndex]!=""){
# Add the info to the final DF
# -- ID
antibioticsUseDF[cellID,1] = tempTable$ID[i]
# -- Type
antibioticsUseDF[cellID,2] = ""
# -- Brand
antibioticsUseDF[cellID,3] = tempTable[i , currentIndex - 2]
# -- ATC
antibioticsUseDF[cellID,4] = tempTable[i , currentIndex]
# -- Regularity
antibioticsUseDF[cellID,5] = ""
# -- Content
antibioticsUseDF[cellID,6] = ""
cellID = cellID + 1
}
}
}
# -- Manual review of painkillers
# -- Manual review of sleeping pills
# -- Manual review of antidepressant
# -- Manual review of ADHD medication
# -- Manual review of Tranquilizars
# There is a single column that keep track of these variables and is a
# yes/no field, that goes back to 4 week. So the question is:
#
#       " Have you taken sleeping pills in the last 4 weeks? "
#
# Since the time is so long, and the ATC is unknown, we are going to
# skip all of these and hope that they are included in the general
# medication table
# -- Add hormonal contraceptives data
tempTable = contraceptivesDBDF
# Delete the non hormonal and unknowns
tempTable = tempTable[as.character(tempTable$Hormonal) != "Non-hormonal",]
tempTable = tempTable[as.character(tempTable$Hormonal) != "Unknown",]
tempTable = tempTable[as.character(tempTable$ATC)      != "Unknown",]
# -- Create the final new dataframe
hormonalUseDF = data.frame(matrix(NA, nrow = nrow(tempTable), ncol = 6))
colnames(hormonalUseDF) = c("ID", "Type", "Brand", "ATC", "Regularity", "Content")
hormonalUseDF$ID    = tempTable$ID
hormonalUseDF$Brand = tempTable$Brand
hormonalUseDF$ATC   = tempTable$ATC
# -- Add multivitamim data
# (do we have too?)
# Finally, we have ALL the data ready, merge all DFs into one
medicinesDBDF = rbind(drugUseDF,     analgesicUseDF)
medicinesDBDF = rbind(medicinesDBDF, antibioticsUseDF)
medicinesDBDF = rbind(medicinesDBDF, hormonalUseDF)
# Now we have all the data ready, let finish by giving more sense to the
# numbers, and adding some extra info about the medicine used
for(i in 1:nrow(medicinesDBDF)){
# Change the regularity string
if(is.na(medicinesDBDF$Regularity[i])) medicinesDBDF$Regularity[i] = "Unknown"
else{
if(medicinesDBDF$Regularity[i] == 1) medicinesDBDF$Regularity[i] = "Regularly"
if(medicinesDBDF$Regularity[i] == 2) medicinesDBDF$Regularity[i] = "Occasionally"
}
# Add the ATC information
medicinesDBDF$Type [i] = getATCInfo(medicinesDBDF$ATC[i])
}
# Everything is finish by now, but there might be repeated rows from
# people that report the same medicine in the recurrent medicine table
# and specific medicine table. So solve that.
# -- Finally, looks for unique combinations of ID + Diagnostic that repeat in the table
dupeDF = medicinesDBDF[,c(1,3)] # Select ID and Brand
medicinesDBDF = medicinesDBDF[!duplicated(dupeDF),]
}
head(medicinesDBDF)
medicinesDBDF
head(drugUseDF)
analgesicUseDF
source("~/Desktop/Amalgamlab/mimisbrunnr/src/dataCleaningV2.R", echo=TRUE)
head(medicinesDBDF)
medicinesDBDF
medicinesDBDF$Type
tempTable
originalHormonalTable
originalHormonalTable    = read.csv(HORMONAL_FILEPATH,  fileEncoding = "ISO-8859-14", stringsAsFactors = FALSE, sep = ";")
head(originalHormonalTable)
HORMONAL_FILEPATH
source("constants.R",  encoding="utf-8")
HORMONAL_FILEPATH
